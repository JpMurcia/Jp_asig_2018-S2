
\c   // seleccionar base de datos
\d   // ver tablas
\d nombre tabla    // ver cada tabla
\l   // ver bases de datos
\q   //salir

CREATE USER nanotutoriales PASSWORD 'password';

DROP USER nanotutoriales; // borrarlo

ALTER ROLE
El manejo de roles en PostgreSQL permite diferentes configuraciones, entre ellas estan:

SUPERUSER/NOSUPERUSER. Super usuario, privilegios para crear bases de datos y usuarios.
CREATEDB/NOCREATEDB. Permite crear bases de datos.
CREATEROLE/NOCREATEROLE. Permite crear roles.
CREATEUSER/NOCREATEUSER. Permite crear usuarios.
LOGIN/NOLOGIN. Este atributo hace la diferencia entre un rol y usuario. Ya que el
usuario tiene permisos para acceder a la base de datos a traves de un cliente.
PASSWORD. Permite alterar la contraseña.
VALID UNTIL. Expiración de usuarios.


ALTE ROLE <nombre del rol> WITH <opciones>

ALTER ROLE nanotutoriales WITH SUPERUSER;

ALTER ROLE nanotutoriales WITH PASSWORD 'nuevopassword';


createdb name;  // crear BD
CREATE DATABASE nanotutoriales_website WITH OWNER nanotutoriales; //
//Crear una base de datos con un usuario específico como propietario

GRANT ALL PRIVILEGES ON DATABASE nanotutoriales_website TO nanotutoriales; //
//Asignar todos los permisos a un usuario a una base de datos existente


\du  // que rol posee un usuario


user doc
password pass2
\c prueba2;


\dp   // lisstar permisos sobre cada tabla

select * from pg_user;  // ver descripcion de roles/usuarios

create group name; // crear un grupo de roles
create group name with user name1, name2;

como ingreso por cmd a la base de datos postgrest

crear usuarios y BD


crear un usuario super 
crean BD
crear tablas 2
todos los usuarios pueden conectarse a cualquier BD... uno
con permisos de ingresar datos en una tabla, el otro eliminar
datos de la tabla, los dos pueden consultar
con un usuario culaquiera como se conecta remotamente desde mi 
equipo a otras bases de datos


psql -U postgres -h localhost


create user administrador password 'pass1';
create user usuario1 password 'pass2';
create user usuario2 password 'pass3';
create user usuario3 password 'pass4';
create database permisos;
create database seguridad;























administrador
pass1

create database base1;
create user user1 password 'pass10';
create user user2 password 'pass11';
create user user3 password 'pass12';
create user user4 password 'pass13';

create table persona (id_persona int primary key,
	nombre varchar(30));

create table docente (id_docente int primary key,
	cargo varchar(40),
	saldo int,
	salon varchar(30));

\d

create role rol1;
create role rol2;
create role rol3;

grant select on persona to rol1;
grant insert, select on docente to rol2;
grant insert, delete on persona, docente to rol3;


grant rol1 to user1;
grant rol2, rol3 to user2;
grant rol3 to user3, user4;


revoke all on schema public from public;
revoke all on databese base1 from public;
revoke all on databese base1 from rol1;

insert into public.docente values(1111, 'a',2000000,'cuatro');

select * from pg_user; 










Triggers

Disparador antes o despues de una acción
INSERT, UPDATE o DELETE
nombre, tiempo, la accion, sobre quien // sobre tablas solamente

En postgres
Se debe crear una función de tipo triggers// procedimineto que va a realizar

se crea el trigger

se llama la funcion 



old // valor antiguo
new // valor nuevo de la actualizacion
/////////
create function suma1() returns trigger 
as $$
	begin
		new.c = (new.a + new.b);
		return new;
 
	end;
$$ language 'plpgsql';
//////////

DATABASE seguridad, USER administrador


create trigger tr_a_ins_suma before insert on suma
for each row execute procedure suma1(); 

insert into suma (a,b) values(20,35);
select *from suma;


drop tr_a_ins_suma on suma;
drop funcion_suma();

drop table suma;

create table operacion (id_operacion int primary key,
	nombre varchar(60));

create table numeros(id_num int primary key, 
	a int, b int, c int,fk_oper int, nombre varchar(30));




TAREA///////////
cada vez que se inserte o actualice un area, se actualiza la extension 
del parque natural

area1    area2   area3
  30       40     30

extension del parque
      100










alter table numeros add constraint fk_oper
foreign key (fk_oper) references operacion (id_operacion);

drop table suma;

drop table operacion;


create or replace function fn_oper() returns trigger
as $$
	begin
		if new.fk_oper = 1 then
		new.c  = (new.a + new.b);
		
	end if;
		if new.fk_oper = 2 then 
		new.c = (new.a - new.b);
		
	end if;
		if new.fk_oper = 3 then
		new.c = (new.a * new.b);
		
	end if;	
		if new.fk_oper = 4 then
		new.c = (new.a / new.b);
		
	end if;

	return new;

end;
$$ language 'plpgsql';





create trigger tr_be_ins_num before insert on numeros
for each row execute procedure fn_oper();


insert into numeros (id_num,a,b,fk_oper) values (222,4,6,2);

create or replace function fn_nume() returns trigger 
as $$
	begin 
		new.nombre  := current_user;
		return new;
	end;
$$ language 'plpgsql';

create trigger tr_be_ins_user before insert on numeros
for each row execute procedure fn_nume();

insert into numeros (id_num,a,b,fk_oper) values (223,7,3,3);

insert into numeros (id_num,a,b,fk_oper) values (224,24,3,4);











create database parcial1;
nomina (fecha(actual), periodo(mes de fecha), total (por defecto 0), id)
Detalle_nomina(id,cantidad,valor)


consecto_nomina (id,nombre, valor_conseato(),porcentaje, operacion(+,-), estado(0,1))







boolean default false,

 

create table nomina( id_nomina int primary key, fecha date, total int default 0); 

create table detalle(id_detalle int primary key, cantidad int, 
		valor int,fk_nomina int,
		fk_concepto int); 

create table concepto(id_concepto int primary key, nombre varchar,
	 valor_concep int,
	 tipo_valor boolean default false,
	 operacion boolean default false,
	 estado boolean default false);


alter table detalle add constraint fk_nomina foreign key
(fk_nomina) references nomina(id_nomina);

alter table detalle add constraint fk_concepto foreign key
(fk_concepto) references concepto(id_concepto);


insert into nomina values(1,'11-11-2010',100);




create or replace function funct_calcular()
	returns trigger as $$
	begin	
		if(estado = true && porcentaje  )
		new.c=(new.valor-new.b);
		return new;
	end;
$$ language 'plpgsql';

create trigger calcular
	before insert
	on detalle for each row
	execute procedure funct_calcular();




//default 0




create or replace function fn_det() returns trigger
as $$
	declare
		
		nuevo_total integer;
	begin
		nuevo_total= old.total+0;
		

		new.total=nuevo_total+new.total;
	return new;

end;
$$ language 'plpgsql';

create trigger tr_be_ins_nom before insert on nomina
for each row execute procedure fn_det();

insert into nomina (id_nomina, total) values (333,100000);


insert into nomina (id_nomina, total) values (334,100000);

drop trigger tr_be_ins_nom on nomina;
drop function fn_det();







Averiguar Arquitectura ORACLE















